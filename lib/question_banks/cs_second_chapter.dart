import 'question.dart';

// Computer Science second chapter questions - Data Structures
final List<Question> csSecondChapterQuestions = [
  Question(
    id: 1,
    text: 'Деректер құрылымы дегеніміз не?',
    options: [
      'Компьютер бағдарламалау тілі',
      'Деректерді ұйымдастыру және сақтау әдісі',
      'Деректер қоры жүйесі',
      'Алгоритмдердің жиынтығы'
    ],
    correctOptionIndex: 1,
  ),
  Question(
    id: 2,
    text: 'Массив деректер құрылымының негізгі ерекшелігі қандай?',
    options: [
      'Элементтер индекстер арқылы қол жетімді',
      'Элементтер кез-келген ретпен сақталады',
      'Элементтер тек бір типті болуы керек емес',
      'Массивтің өлшемі динамикалық түрде өзгереді'
    ],
    correctOptionIndex: 0,
  ),
  Question(
    id: 3,
    text: 'Байланысты тізім (linked list) дегеніміз не?',
    options: [
      'Элементтердің жанында сақталатын деректер құрылымы',
      'Элементтердің индекстер арқылы қол жетімді болатын құрылымы',
      'Элементтердің көрсеткіштер (pointers) арқылы байланысатын тізбегі',
      'FIFO принципімен жұмыс істейтін деректер құрылымы'
    ],
    correctOptionIndex: 2,
  ),
  Question(
    id: 4,
    text: 'Стек (Stack) деректер құрылымы қандай принципке негізделген?',
    options: [
      'FIFO (First In, First Out)',
      'LIFO (Last In, First Out)',
      'LILO (Last In, Last Out)',
      'FILO (First In, Last Out)'
    ],
    correctOptionIndex: 1,
  ),
  Question(
    id: 5,
    text: 'Кезек (Queue) деректер құрылымы қандай принципке негізделген?',
    options: [
      'FIFO (First In, First Out)',
      'LIFO (Last In, First Out)',
      'LILO (Last In, Last Out)',
      'FILO (First In, Last Out)'
    ],
    correctOptionIndex: 0,
  ),
  Question(
    id: 6,
    text: 'Хэш-кесте (Hash table) не үшін қолданылады?',
    options: [
      'Деректерді тек реттелген түрде сақтау үшін',
      'Деректерді кілт-мән жұптары түрінде сақтау және жылдам іздеу үшін',
      'Тек сандық деректерді сақтау үшін',
      'Деректерді сұрыптау үшін'
    ],
    correctOptionIndex: 1,
  ),
  Question(
    id: 7,
    text: 'Бинарлық іздеу ағашы (Binary Search Tree) қандай қасиетке ие?',
    options: [
      'Әр түйіннің сол жақ ішкі ағашындағы барлық түйіндердің мәндері үлкен, ал оң жақ ішкі ағашындағы барлық түйіндердің мәндері кіші',
      'Әр түйіннің сол жақ ішкі ағашындағы барлық түйіндердің мәндері кіші, ал оң жақ ішкі ағашындағы барлық түйіндердің мәндері үлкен',
      'Барлық түйіндер тек екі баласы болуы керек',
      'Ағаштың барлық жапырақтары бір деңгейде болуы керек'
    ],
    correctOptionIndex: 1,
  ),
  Question(
    id: 8,
    text: 'AVL ағашы дегеніміз не?',
    options: [
      'Өзін-өзі балансталмайтын бинарлық іздеу ағашы',
      'Өзін-өзі балансталатын бинарлық іздеу ағашы',
      'Бинарлық емес іздеу ағашы',
      'Деректерді сұрыптайтын алгоритм'
    ],
    correctOptionIndex: 1,
  ),
  Question(
    id: 9,
    text: 'Граф деректер құрылымы нені сипаттайды?',
    options: [
      'Тек сызықтық байланыстарды',
      'Тек иерархиялық деректерді',
      'Түйіндер мен қабырғалардан тұратын объектілердің жиынтығын',
      'Тек реттелген деректерді'
    ],
    correctOptionIndex: 2,
  ),
  Question(
    id: 10,
    text: 'Бағытталған граф пен бағытталмаған графтың айырмашылығы неде?',
    options: [
      'Бағытталған графта қабырғалардың бағыты болады, ал бағытталмаған графта - жоқ',
      'Бағытталған графта циклдер болмайды',
      'Бағытталмаған графта әр түйін тек бір қабырғаға ие',
      'Бағытталған графта түйіндер арасында байланыс болмауы мүмкін'
    ],
    correctOptionIndex: 0,
  ),
  Question(
    id: 11,
    text: 'Деректер құрылымдарын бағалау критерийлері қандай?',
    options: [
      'Тек жад қолдану тиімділігі',
      'Тек орындалу жылдамдығы',
      'Жад тиімділігі, орындалу жылдамдығы және қолданылу қарапайымдылығы',
      'Тек бағдарламалау тіліне тәуелділік'
    ],
    correctOptionIndex: 2,
  ),
  Question(
    id: 12,
    text: 'Приоритетті кезек (Priority Queue) дегеніміз не?',
    options: [
      'Кәдімгі кезек (FIFO)',
      'Әр элементтің басымдығына қарай қызмет көрсетілетін кезек',
      'Стектің бір түрі',
      'Массивтің бір түрі'
    ],
    correctOptionIndex: 1,
  ),
  Question(
    id: 13,
    text: 'B-Tree деректер құрылымының артықшылығы қандай?',
    options: [
      'Тек жадыда жұмыс істейді',
      'Диск операцияларын азайту арқылы үлкен көлемді деректермен жұмыс істеуге оңтайландырылған',
      'Тек кіші деректер жиындары үшін тиімді',
      'Сұрыптау үшін қолданылады'
    ],
    correctOptionIndex: 1,
  ),
  Question(
    id: 14,
    text: 'Хэш-функция дегеніміз не?',
    options: [
      'Деректерді шифрлау алгоритмі',
      'Деректерді кез-келген көлемнен белгілі бір ұзындықтағы мәнге түрлендіретін функция',
      'Массивтегі элементтерді іздейтін функция',
      'Графтардағы жол табу алгоритмі'
    ],
    correctOptionIndex: 1,
  ),
  Question(
    id: 15,
    text: 'Хэш-коллизия дегеніміз не?',
    options: [
      'Хэш-функция екі түрлі кіріс мәндері үшін бірдей хэш мәнін қайтарған жағдай',
      'Хэш-функцияның орындалу қателігі',
      'Хэш-кестедегі деректердің жоғалуы',
      'Хэш-функцияның баяу жұмыс істеуі'
    ],
    correctOptionIndex: 0,
  ),
  Question(
    id: 16,
    text: 'Циклдік буферді (Circular Buffer) қандай жағдайда қолданған жөн?',
    options: [
      'Деректерді сұрыптау үшін',
      'Деректерді іздеу үшін',
      'Шектеулі жадыда деректерді буферлеу үшін',
      'Графика салу үшін'
    ],
    correctOptionIndex: 2,
  ),
  Question(
    id: 17,
    text: 'Тріе (Trie) деректер құрылымы не үшін қолданылады?',
    options: [
      'Жылдам сұрыптау үшін',
      'Жылдам іздеу үшін',
      'Жолдарды тиімді сақтау және іздеу үшін',
      'Деректерді сығымдау үшін'
    ],
    correctOptionIndex: 2,
  ),
  Question(
    id: 18,
    text: 'Сегмент ағашы (Segment Tree) не үшін қолданылады?',
    options: [
      'Деректерді сұрыптау үшін',
      'Аралық сұраныстарды (range queries) тиімді орындау үшін',
      'Графтарды сақтау үшін',
      'Деректерді сығымдау үшін'
    ],
    correctOptionIndex: 1,
  ),
  Question(
    id: 19,
    text: 'Массивтің уақыт күрделілігі - элементке индекс бойынша қол жеткізу:',
    options: [
      'O(1)',
      'O(log n)',
      'O(n)',
      'O(n²)'
    ],
    correctOptionIndex: 0,
  ),
  Question(
    id: 20,
    text: 'Байланысты тізімнің (Linked List) уақыт күрделілігі - элементке қол жеткізу:',
    options: [
      'O(1)',
      'O(log n)',
      'O(n)',
      'O(n²)'
    ],
    correctOptionIndex: 2,
  ),
]; 